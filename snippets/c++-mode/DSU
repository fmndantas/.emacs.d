# -*- mode: snippet -*-
# name: dsu
# key: dsu
# --
class DSU {
private:
  vector<int> p, rank, size;
  int numSets;
public:
  DSU(int N) {
    rank.assign(N, 0); p.assign(N, 0); size.assign(N, 0); numSets = N;
    for (int i = 0; i < N; ++i) p[i] = i;
  }
  int find(int i) { while (i != p[i]) i = p[i]; return i; }
  bool same(int i, int j) { return find(i) == find(j); }
  void unionSet(int i, int j) {
    if (!same(i, j)) {
      numSets--;
      int x = find(i), y = find(j);
      if (rank[x] > rank[y]) { p[y] = x; size[x] += size[y]; }
      else { p[x] = y; size[y] += x; if (rank[x] == rank[y]) { rank[y]++; } }
    }
  }
  int numberOfSets() { return numSets; }
  int sizeOfSet(int i) { return size[i]; }  
};